*haunt*	Floating windows for terminals, man pages and help buffers >
					      .-.
					     ( O )
					  /\_.' '._/\
		 |_   _ _ _  _ _ __  |_   |         |
		   \/ ,` ! ,  ! ,  \  _|   \       /
		_| !\__._.\_._|_. _!\__.    \    /`
					  (__)  /
					  `.__.'

		https://git.sr.ht/~adigitoleo/haunt.nvim

		haunt (noun):
		  a place frequented by a specified person or group of people

Type |gO| to see the table of contents.

==============================================================================
INTRODUCTION						*haunt-introduction*

This plugin provides the commands |:HauntTerm|, |:HauntHelp| and |:HauntMan|
to open terminals, man pages and help buffers in floating windows (see
|api-floatwin|). Multiple floating terminals with distinct states can be
hidden during long-running terminal jobs and later restored to the floating
window view. By contrast, only one floating man page and help buffer are
supported (per |tabpage|). When these are closed, they will not be restored;
simply pass the same argument to |:HauntHelp| or |:HauntMan| instead. The
plugin requires NeoVim, and is tested on the latest NeoVim version available
for Arch Linux: <https://archlinux.org/packages/extra/x86_64/neovim/>.

Bug fixes and feature requests are welcome at my public inbox: >

	https://lists.sr.ht/~adigitoleo/public-inbox

Patches should be applicable to the `dev` branch. See |haunt-bugs| for a link
to a unified issue tracker (search for issues preficed with '[haunt.nvim]').


==============================================================================
USAGE								*haunt-usage*

Once the plugin files are on your 'packpath', initialise the plugin with >

	:lua require('haunt').setup()

in your `init.vim` file or simply >

	require('haunt').setup()

in `init.lua`. Options can be configured by passing a table to `setup`, e.g. >

	require('haunt').setup{ window = { show_title = false } }

Configuration options are described in |haunt-config|.

------------------------------------------------------------------------------
							*haunt-mappings*

Only |<Plug>| mappings are provided by default. It is recommended to map these
to a comfortable key sequence using e.g. |vim.keymap.set()|. The following
targets are provided, and their descriptions can be queried with the |:map|
command, e.g. `:map <Plug>(haunt-send)`.

	<Plug>(haunt-send)


==============================================================================
CONFIGURATION					*haunt-config* *haunt.setup*

This section describes the supported configuration options.
Any omitted values will be set to their indicated defaults.

Lua configuration example ~
>
	require('haunt').setup{
		window = {
			width_frac = 0.7,
			height_frac = 0.7,
			winblend = 50,
			title_pos = "center",
		},
	}

------------------------------------------------------------------------------
						*haunt.setup.define_commands*

This boolean option can be set to false to disable the default command
definitions for |:HauntTerm|, |:HauntHelp|, |:HauntMan|, |:HauntLs| and
|:HauntReset|. It is possible to use alternative command names by manually
passing the |haunt-functions| to |nvim_create_user_command|.

------------------------------------------------------------------------------
						*haunt.setup.quit_help_with_q*

This boolean option can be set to false to disable the creation of a
|Normal-mode| |mapping| which allows closing help windows with the `q` key.

------------------------------------------------------------------------------
						*haunt.setup.set_term_autocmds*

This boolean option can be set to false to disable the opinionated default
terminal buffer autocommands, which run |:startinsert| for floating terminals,
among other quality-of-life settings.

------------------------------------------------------------------------------
							*haunt.setup.window*

This option controls the appearance of the floating window. It is a table with
the following keys

	key		value		description ~
	----------------------------------------------------------------------
	width_frac	number		fraction of |'columns'| used for the
					floating window width (default: `0.8`)
	----------------------------------------------------------------------
	height_frac	number		fraction of |'lines'| used for the
					floating window height (default: `0.8`)
	----------------------------------------------------------------------
	winblend	integer		percent transparency of the floating
					window, see |'winblend'| (default: `25`)
	----------------------------------------------------------------------
	border		string or	border style for the floating window
			array		see |nvim_open_win| (default: `"single"`)
	----------------------------------------------------------------------
	show_title	boolean		toggle display of titles in the
					floating window border (default: `true`)
	----------------------------------------------------------------------
	title_pos	string		position of the title, see
					|nvim_open_win| (default: `"left"`)
	----------------------------------------------------------------------
	zindex		integer		"priority" of the floating window,
					see |api-win_config| (default: `11`)


==============================================================================
FUNCTIONS					*haunt-functions* *haunt-api*

This plugin exposes a few functions via the `require("haunt")` Lua namespace
which can be used in custom command definitions or key bindings. They are
listed in the table below. Note that all functions except `ls` are not safe to
be executed when |textlock| is active (i.e. you may need to use
|vim.schedule| or |vim.schedule_wrap|).

	function	description ~
	----------------------------------------------------------------------
	`term({*opts})`	open/focus floating terminal; accepts an optional
			argument, which is a table containing at least `.fargs`
			(and possibly other keys as passed to
			|nvim_create_user_command|, see the `{command}` argument)
	`help({*opts})`	open floating help buffer; signature is identical to
			`haunt_term` (if `opts.fargs` is omitted, |<cword>|
			will be used instead)
	`man({*opts})`	open floating man page buffer; signature is identical
			to `haunt_term` (if `opts.fargs` is omitted, |<cword>|
			will be used instead)`
	`ls({*opts}[,s])` show the current mapping of floating terminal titles
			to buffer numbers; with `opts.bang = true` all other
			terminals, identified by their |job-id|s, are also
			listed; with `opts.smods.verbose` > 0 the return value
			becomes a table which includes (non-unique)
			|b:term_title|s; the optional second argument is a
			boolean that can be used to turn off the |vim.print()|
			output (only useful when collecting the return value)
	`send([id])`	send whole buffer, selected lines, or fenced code
			block (markdown files) to a running terminal with
			a given |job-id| (or t:HauntState.channel by default)
	`reset()`	close floating window and reset tab-local state to
			defaults (except the `termbuf` listing, which is
			preserved to facilitate terminal buffer recovery)


==============================================================================
COMMANDS						*haunt-commands*

This plugin defines a few commands, unless |haunt.setup.define_commands| is
`false`. They are specified below.

------------------------------------------------------------------------------
								*:HauntTerm*

This command launches or restores a floating terminal. Without arguments,
launches an interactive |'shell'|. If the first argument is `-t`, then the
second argument specifies the floating window title. Otherwise, the first
argument is used as the title. Each floating terminal must have a unique
title. The arguments specify either (1) the external command to be run, and
its command line arguments or (2) the buffer number of an existing terminal
buffer (in this case, setting an explicit title with `-t <title>` is
required). Tab-completion via |command-complete| is set to `shellcmd`.

------------------------------------------------------------------------------
								*:HauntHelp*

This command launches a floating help buffer. The optional argument specifies
the help tag to be opened. Otherwise, the word under the cursor is used as the
help tag. Tab-completion via |command-complete| is set to `help` (the list of
all help tags).

------------------------------------------------------------------------------
								*:HauntMan*

This command launches a floating man page, and relies on |man.lua|. The
optional argument specifies the man page to be opened. It can be prefaced with
a section number, as per the examples for |:Man|. Otherwise, the word under
the cursor is used as the man page query. Tab-completion via
|command-complete| is set to a thin wrapper of `require("man").man_complete`.

The variant `:HauntMan!` renders the current buffer as a man page.

------------------------------------------------------------------------------
								*:HauntLs*

Shows the current mapping of floating terminal titles to buffer numbers. The
mapping may be many-to-one if the title for a floating terminal was updated.
In this case, using either title with `:HauntTerm -t <title>` will restore the
same buffer.

The variant `:HauntLs!` will include a mapping of |job-id|s to buffer
numbers for all other (non-floating) terminal buffers.

The |:verbose| modifier is supported and will change the output to a table that
includes the (non-unique) |b:term_title| of each listed terminal buffer.

------------------------------------------------------------------------------
								*:HauntReset*

Equivalent to `=require('haunt').reset()`. See |haunt-api| for documentation.
Can be used to attempt recovery after tab-local state becomes corrupted.


==============================================================================
BUGS								*haunt-bugs*

Please use my public inbox¹ to reach out with bug reports or send patches.
Also check the task tracker² to discover current known bugs and requests,
and relevant discussions about work-in-progress fixes or implementations.

1: <https://lists.sr.ht/~adigitoleo/public-inbox>
2: <https://todo.sr.ht/~adigitoleo/nvim-plugins>

vim:tw=78:ts=8:noet:ft=help:norl:
